knitr::opts_chunk$set(echo = TRUE)
source("https://bioconductor.org/biocLite.R")
library(BiocManager)
source("https://bioconductor.org/biocLite.R")
install.packages("BiocManager")
install.packages("BiocManager")
knitr::opts_chunk$set(echo = TRUE)
library(BiocManager)
source("https://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
BiocManager::install(c("GenomicDataCommons", "TCGAbiolinks", "maftools"))
library(GenomicDataCommons)
library(TCGAbiolinks)
library(maftools)
GenomicDataCommons::status()
cases_by_project <- cases() %>%
facet("project.project_id") %>%
aggregations()
head(cases_by_project)
cases_by_project <- cases() %>%
facet("project.project_id") %>%
aggregations()
head(cases_by_project)
View(cases_by_project)
View(cases_by_project[["project.project_id"]])
head(cases_by_project)
head(cases_by_project)
knitr::opts_chunk$set(echo = TRUE)
library(GenomicDataCommons)
library(TCGAbiolinks)
library(maftools)
cases_by_project <- cases() %>%
facet("project.project_id") %>%
aggregations()
head(cases_by_project)
x <- cases_by_project$project.project_id
# Make a custom color vector for our plot
colvec <- rep("lightblue", nrow(x))
colvec[colvec == "TCGA-PAAD"] <- "red"
# Plot with 'log' for y axis and rotate labels with 'las'
#par(___)
barplot(cases_by_project, names.arg=x, log="y", col=colvec, las=2)
x <- cases_by_project$project.project_id
# Make a custom color vector for our plot
colvec <- rep("lightblue", nrow(x))
colvec[colvec == "TCGA-PAAD"] <- "red"
# Plot with 'log' for y axis and rotate labels with 'las'
#par(___)
barplot(cases_by_project$project.project_id$doc_count, names.arg=x, log="y", col=colvec, las=2)
x <- cases_by_project$project.project_id
# Make a custom color vector for our plot
colvec <- rep("lightblue", nrow(x))
colvec[colvec == "TCGA-PAAD"] <- "red"
# Plot with 'log' for y axis and rotate labels with 'las'
#par(___)
barplot(x$doc_count, names.arg=x$key, log="y", col=colvec, las=2)
x <- cases_by_project$project.project_id
# Make a custom color vector for our plot
colvec <- rep("lightblue", nrow(x))
colvec[x$key == "TCGA-PAAD"] <- "red"
# Plot with 'log' for y axis and rotate labels with 'las'
#par(___)
barplot(x$doc_count, names.arg=x$key, log="y", col=colvec, las=2)
cases_by_project <- cases() %>%
facet("project.project_id") %>%
aggregations()
head(cases_by_project)
cases_by_project <- cases() %>%
facet("project.project_id") %>%
aggregations()
head(cases_by_project$project.project_id)
cases_by_project <- cases() %>%
facet("project.project_id") %>%
aggregations()
head(cases_by_project)
query <- GDCquery(project="TCGA-PAAD",
data.category="Transcriptome Profiling",
data.type="Gene Expression Quantification")
ans <- getResults(query)
head(ans)
nrow(ans)
View(ans)
maf.file <- GDCquery_Maf(tumor="PAAD", pipelines = "mutect")
View(maf.file)
head(maf.file)
vars = read.maf(maf = maf.file, verbose = FALSE)
plotmafSummary(vars)
oncoplot(maf = vars, top = 10)
# Oncoplot for our top 10 most frequently mutated genes
pdf("oncoplot_panc.pdf")
oncoplot(maf = vars, top = 10, fontSize = 12)
dev.off()
# Oncoplot for our top 10 most frequently mutated genes
pdf("oncoplot_panc.pdf")
oncoplot(maf = vars, top = 10, fontSize = 12)
dev.off()
# Oncoplot for our top 10 most frequently mutated genes
pdf("oncoplot_panc.pdf")
oncoplot(maf = vars, top = 10, fontSize = 2)
dev.off()
# Oncoplot for our top 10 most frequently mutated genes
pdf("oncoplot_panc.pdf")
oncoplot(maf = vars, top = 10, fontSize = 0.2)
dev.off()
# Oncoplot for our top 10 most frequently mutated genes
pdf("oncoplot_panc.pdf")
# Oncoplot for our top 10 most frequently mutated genes
pdf("oncoplot_panc.pdf")
oncoplot(maf = vars, top = 10, fontSize = 1)
dev.off()
oncostrip(maf=vars, genes=c("KRAS", "TP53"))
lollipopPlot(vars, gene='KRAS')
lollipopPlot(vars, gene='TP53')
# Oncoplot for our top 10 most frequently mutated genes
pdf("oncoplot_panc.pdf")
oncoplot(maf = vars, top = 10, fontSize = 0.8)
dev.off()
install.packages("bio3d")
library(bio3d)
seqs <- read.fasta("lecture18_sequences.fa")
seqs
## Calculate positional identity scores
ide <- conserv(seqs$ali, method="identity")
mutant.sites <- which(ide < 1)
## Exclude gap possitions from analysis
gaps <- gap.inspect(seqs)
mutant.sites <- mutant.sites[mutant.sites %in% gaps$f.inds]
mutant.sites
## Make a "names" label for our output sequences (one per mutant)
mutant.names <- paste0(seqs$ali["P53_wt",mutant.sites],
mutant.sites,
seqs$ali["P53_mutant",mutant.sites])
mutant.names
start.position <- mutant.sites - 8
end.position <-  mutant.sites + 8
# Blank matrix to store sub-sequences
store.seqs <- matrix("-", nrow=length(mutant.sites), ncol=17)
rownames(store.seqs) <- mutant.names
## Extract each sub-sequence
for(i in 1:length(mutant.sites)) {
store.seqs[i,] <- seqs$ali["P53_mutant",start.position[i]:end.position[i]]
}
store.seqs
## Output a FASTA file for further analysis
write.fasta(seqs=store.seqs, ids=mutant.names, file="subsequences.fa")
